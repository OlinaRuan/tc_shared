package com.topcoder.shared.util.sql;

import javax.sql.DataSource;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.util.logging.Logger;

public class SimpleDataSource implements DataSource {

    private final String url;
    private final String username;
    private final String password;

    private Logger logger = Logger.getLogger(SimpleDataSource.class.getSimpleName());

    public SimpleDataSource(String jdbcDriverClassName, String url) throws ClassNotFoundException {
        this(jdbcDriverClassName, url, null, null);
    }

    public SimpleDataSource(String jdbcDriverClassName, String url, String username, String password)
            throws ClassNotFoundException {
        if (url == null) {
            throw new NullPointerException("The url cannot be null");
        }
        Class.forName(jdbcDriverClassName);
        this.url = url;
        this.username = username;
        this.password = password;
    }
    
    ////////////////////////////////////////////////////
    // methods added 22Apr08 by leadhyena_inran
    // to quell compiler errors when compiling in Java 1.6
    // TODO: Default isWrapperFor, does it need changing?
    public boolean isWrapperFor(java.lang.Class<?> ignored){
    	return true;
    }

    // TODO: Default unwrap, does it need changing?
    public <T> T unwrap(java.lang.Class<T> ignored){
    	return (T)null;
    }

    public final Connection getConnection() throws SQLException {
        return getConnection(username, password);
    }

    public final Connection getConnection(String username, String password) throws SQLException {
        return DriverManager.getConnection(url, username, password);
    }

    public final PrintWriter getLogWriter() {
        return DriverManager.getLogWriter();
    }

    public final void setLogWriter(PrintWriter out) {
        DriverManager.setLogWriter(out);
    }

    public final int getLoginTimeout() {
        return DriverManager.getLoginTimeout();
    }

    /**
     * Return the parent Logger of all the Loggers used by this data source. This should be the Logger farthest from the
     * root Logger that is still an ancestor of all of the Loggers used by this data source. Configuring this Logger
     * will affect all of the log messages generated by the data source. In the worst case, this may be the root
     * Logger.
     *
     * @return the parent Logger for this data source
     * @throws SQLFeatureNotSupportedException if the data source does not use <code>java.util.logging<code>.
     * @since 1.7
     */
    @Override
    public Logger getParentLogger() throws SQLFeatureNotSupportedException {
        return logger;
    }

    public final void setLoginTimeout(int seconds) {
        DriverManager.setLoginTimeout(seconds);
    }

}
